import replicate
import csv
import re


client = replicate.Client(api_token="API_TOKEN")
def clean_output(text):
    # Removing excessive 'Sure' or other repetitive noise
    cleaned_text = re.sub(r'(Sure\s+)+', '', text)
    return cleaned_text



def generate_test_case(scenario):
    input_parameters = {
        "top_k": 0,
        "top_p": 1,
        "temperature": 0.5,
        "system_prompt": "You are a quality assurance engineer drafting test cases for a web-based login system.",
        "prompt": f" Generate a table with the following columns: ScenarioInput, Testcases. Start directly with the table for the scenario: {scenario}.",
        "max_new_tokens": 1100,
        "length_penalty": 1,
        "presence_penalty": 0,
        "prompt_template": "<s>[INST] <<SYS>>\n{system_prompt}\n<</SYS>>\n\n{prompt} [/INST]"
    }

    full_output = ""  
    for event in client.stream("meta/llama-2-7b-chat", input=input_parameters):
        if isinstance(event, dict) and "text" in event:
            full_output += event['text']
        else:
            full_output += str(event)
    return full_output



# List of scenario inputs
scenarios_inputs = [
    "Verify that users can register with valid information",
    "Verify that users cannot register with invalid information (e.g., invalid email format, duplicate username).",
    "Verify that users can log in with correct credentials.",
    "Verify that users cannot log in with incorrect credentials.",
    "Verify that users can reset their password if forgotten.",
    "Verify that users can browse through different restaurants.",
    "Verify that users can search for restaurants by name, cuisine, location, etc.",
    "Verify that users can filter search results based on various criteria (e.g., price, ratings, delivery time).",
    "Verify that users can view details of a restaurant including menu, reviews, ratings, and photos.",
    "Verify that users can add items to their cart from the menu.",
    "Verify that users can specify customization options (e.g., toppings, spiciness level).",
    "Verify that users can view their cart, modify quantities, and remove items.",
    "Verify that users can proceed to checkout and choose delivery or pickup options.",
    "Verify that users can add delivery addresses and payment methods.",
    "Verify that users can apply promo codes or discounts.",
    "Verify that users can view their order history.",
    "Verify that users receive confirmation emails/SMS upon placing an order.",
    "Verify that users receive real-time updates on the status of their order (e.g., order confirmed, food being prepared, out for delivery).",
    "Verify that users can cancel an order before it is confirmed by the restaurant.",
    "Verify that users can contact customer support for any issues with their order.",
    "Verify that restaurant owners can register and set up their profiles.",
    "Verify that restaurant owners can add/edit their menu items, prices, and descriptions.",
    "Verify that restaurant owners can set their availability and delivery radius.",
    "Verify that restaurant owners receive notifications of new orders and can accept/reject them.",
    "Verify that restaurant owners can update order status (e.g., food prepared, out for delivery).",
    "Verify that payments are processed securely.",
    "Verify that users can add multiple payment methods and choose between them.",
    "Verify that users receive receipts for their orders.",
    "Verify that refunds are processed correctly in case of cancellations or issues with the order.",
    "Verify that users can add multiple payment methods and choose between them.",
    "Verify that the app is responsive and works smoothly on different devices and screen sizes.",
    "Verify that the app is accessible to users with disabilities.",
    "Verify that the app loads quickly and does not crash under heavy usage.",
    "Verify that the app provides helpful error messages and guidance in case of errors or failures.",
    "Verify that the app follows design guidelines and provides a consistent user experience throughout.",
    "Verify that the app supports multiple languages and currencies.",
    "Verify that the app displays localized content (e.g., restaurant names, menu items) correctly.",
    "Verify that user data is stored securely and encrypted.",
    "Verify that sensitive information (e.g., passwords, payment details) is handled securely.",
    "Verify that the app has appropriate measures in place to prevent unauthorized access or data breaches.",
    "Verify that users have control over their privacy settings and can manage their data as per privacy regulations (e.g., GDPR).",
    "Verify that users can leave reviews and ratings for restaurants and their orders.",
    "Verify that users can edit or delete their own reviews.",
    "Verify that restaurants can respond to user reviews.",
    "Verify that the app aggregates and displays reviews and ratings accurately.",
    "Feature : Optimal Route Determined by Shortest Distance",
    "Traffic Consideration Route",
    "Priority Delivery based on Urgency",
    "Time-Sensitive Delivery",
    "Dynamic Route Optimization",
    "Weather Conditions Consideration",
    "Multi-Agent Collaboration",
    "Customer Delivery Preference",
    "Specialized Delivery Vehicles",
    "Resource Allocation Strategy",
    "Delivery Time Slot Confirmation",
    "Alternative Route Planning",
    "Vehicle Breakdown Handling",
    "High Traffic Period Handling",
    "Peak Demand Handling",
    "Variable Delivery Windows",
    "Unexpected Order Cancellation",
    "User searches for a specific medicine",
    "User searches for medicines with a specific condition",
    "User searches for over-the-counter (OTC) products",
    "User searches for prescription-only medicines ",
    "User clicks on a medicine from the search results",
    "User Searches for Medicines Based on Symptoms",
    "User Adds a New Address",
    "User Attempts to Add an Address with Missing Information",
    "User Selects a Previously Added Address",
    "User Edits an Existing Address",
    "User Deletes an Existing Address",
    "User Completes a Successful Payment",
    "User Attempts Payment with Invalid Card Details",
    "User Cancels the Payment Process",
    "User Selects a Different Payment Method",
    "User Checks Payment History",
    "User Checks Delivery Status with Valid Order ID",
    "User Attempts to Track Delivery with an Invalid Order ID",
    "User Tracks Delivery using an Order ID from Another User",
    "User Checks Delivery Status before Payment",
    "Verify that users can successfully create a new expense with all required details (amount, description, date, participants).",
    "Test if the application handles invalid input gracefully (e.g., negative amounts, missing participants).",
    "Ensure that expenses can be categorized correctly (e.g., groceries, utilities, rent).",
    "Check if users can edit existing expenses (changing amount, description, participants).",
    "Verify that editing an expense recalculates debts and shares accurately.",
    "Create expenses with various amounts and participants, then verify that the application accurately calculates debts between users.",
    "Test scenarios with unequal splits (e.g., one user pays more than others).",
    "Test if users can mark debts as settled and verify that the balances are updated accordingly.",
    "Ensure that settlements are reflected in individual and group balances accurately.",
    "Verify that the application accurately displays the real-time location of buses running on a specific route.Steps:Select a route for tracking.Confirm that the displayed location of the bus matches its actual position on the map.Check for any delays in updating the bus's location.",
    "Ensure the application provides accurate information about the next bus available at the user's location.Steps:Set the current location to a specific point on the map.Verify that the application correctly displays the estimated arrival time of the next bus at that location.Check if the estimated time matches the actual arrival time of the next bus.",
    "Confirm that the application correctly displays the route of a bus based on its route number.Steps:Enter the route number of a bus.Verify that the application shows the entire route of the bus on the map.Check if the displayed route matches the official route of the selected bus.",
    "Validate that the application lists all the bus stoppings along a particular route.Steps:Select a route to view its details.Check if the application displays a list of all the bus stoppings in sequential order.Ensure that the listed bus stoppings are accurate and correspond to the actual stops on the route.",
    "Ensure the application allows users to choose/change the city for which they want to track the buses.Steps:Access the settings or preferences section of the application.Select the option to change the city.Verify that the user can successfully switch to a different city and view bus information specific to that city."
    
    
]


csv_file = 'LLaMA2_generated_test_cases.csv'


with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['Scenarios Input', 'Testcases'])
    for scenario in scenarios_inputs:
        test_case = generate_test_case(scenario)
        test_case_text = clean_output(test_case)
        writer.writerow([scenario, test_case_text])

print(f"Test cases generated and saved to '{csv_file}'.")
